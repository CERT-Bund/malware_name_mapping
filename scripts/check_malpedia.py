#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Iterates over all malpedia entries and checks if there is an existing rule for
all given alternative names.
"""
import argparse
import csv
import re
import os.path
import requests
import sys


filename = 'mapping.csv'
for path in ['./', '../']:
    if os.path.exists(os.path.join(path, filename)):
        filename = os.path.join(path, filename)
        break
else:
    print("File 'mapping.csv' not found in '.' and '..'.", file=sys.stderr)
    sys.exit(2)
with open('/home/sebastian/dev/malware_name_mapping/mapping.csv') as handle:
    mapping = csv.reader(handle)
    expressions = {line[0] for line in mapping}

parser = argparse.ArgumentParser(
    prog='check_malpedia',
    description='Checks if malpedia lists malware names which this mapping does not support.',
)

parser.add_argument('username',
                    help='The username to log into malpedia.')
parser.add_argument('password',
                    help='The password to log into malpedia.')
args = parser.parse_args()
auth = (args.username, args.password)
families_req = requests.get('https://malpedia.caad.fkie.fraunhofer.de/api/list/families',
                            auth=auth)
families_req.raise_for_status()  # missing login
families = families_req.json()

for family in families:
    if not family.startswith('win'):
        continue
    altnames = requests.get('https://malpedia.caad.fkie.fraunhofer.de/api/get/family/%s' % family,
                            auth=auth).json()['alt_names']
    unmatched_altnames = []
    for altname in altnames:
        for rule in expressions:
            if re.match(rule, altname, re.IGNORECASE):
                break
        else:
            unmatched_altnames.append(altname)

    if unmatched_altnames:
        print("No mapping for altnames '%s' of malpedia entry %r."
              "" % ("', '".join(unmatched_altnames), family))
